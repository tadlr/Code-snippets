<?php

use Drupal\Component\Render\FormattableMarkup;
use \Drupal\Core\Cache\RefinableCacheableDependencyInterface;

/**
 * Implements hook_preprocess().
 */
function atssc_intra_wxt_preprocess(&$variables, $hook) {
  $language                 = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $config                   = \Drupal::config('system.site');
  $variables['site_name']   = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');
  $variables['language']    = $language;
}

/**
 * Implements hook_preprocess_html().
 */
function atssc_intra_wxt_preprocess_html(&$variables) {
  // add language code to body class
  $language                           = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['attributes']['class'][] = 'lang-' . $language;

  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node)) {

    // add node id to body class

    $variables['attributes']['class'][] = 'node-' . $node->id();

    if ($node->hasField('field_related_links') && !$node->get('field_related_links')->isEmpty()) {
      $variables['attributes']['class'][] = 'has-related-links';
    }
  }

  // Add Microsoft Compatibility tag to HEAD
  $xuacompatible                                 = [
    '#tag'        => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content'    => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$xuacompatible, 'x-ua-compatible'];
}

/**
 * Implements hook_preprocess_html().
 */
function atssc_intra_wxt_preprocess_page(&$variables) {
  $node            = \Drupal::routeMatch()->getParameter('node');
  $route_name      = \Drupal::routeMatch()->getRouteName();

  $excluded_routes = ['entity.webform.canonical', 'view.search.search_page'];
  $excluded_bundles = ['webform'];

  if (is_object($node) || in_array($route_name, $excluded_routes)) {
    if (in_array($route_name, $excluded_routes)) {
      $variables['is_wdcb'] = TRUE;
    } else if ($node && $node->hasField('field_wdcb') || $variables['is_front']) {
      $variables['is_wdcb'] = TRUE;
    } else if ($node && $node->hasField('field_single_wdcb') || $variables['is_front']) {
      $variables['is_wdcb'] = TRUE;
    } else if (is_object($node) && in_array($node->bundle(), $excluded_bundles)) {
      $variables['is_wdcb'] = TRUE;
    } else {
      $variables['is_wdcb'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function atssc_intra_wxt_preprocess_paragraph(&$variables) {
  // add Paragaph id to each paragraph so they can be individually targeted.
  // This was explicitly added so we can use the background image and responsive background image
  // on paragraph elements.
  $variables['attributes']['id'] = 'paragraph-' . $variables['paragraph']->id();
  // $variables['item_id'] = rand(0, 100000) + 100;
}

/**
 * Implements hook_preprocess_form().
 */
// function atssc_intra_wxt_preprocess_form(&$variables) {
//   if ($variables['element']['#form_id'] === "wxt_search_block_form") {
//     $action                            = '/' . $variables['language'] . '/search';
//     $variables['element']['#action']   = $action;
//     $variables['attributes']['action'] = $action;
//   }
// }

/**
 * Implements hook_preprocess_HOOK().
 */
function atssc_intra_wxt_preprocess_views_view(&$variables) {
  $variables['attributes']['id'] = $variables['id'] . '-' . $variables['display_id'];
}

// /**
//  * Implements hook_theme_suggestions_HOOK().
//  */
// function atssc_intra_wxt_theme_suggestions_field_alter(&$suggestions, $variables) {
//   $field = $variables['element'];
// }

/**
 * Implements hook_preprocess_input().
 */
// function atssc_intra_wxt_preprocess_input(&$variables) {
//   if ($variables['type'] === 'textfield' && isset($variables['element']['#input_mask'])) {
//     if ($variables['element']['#input_mask'] == "'alias': 'currency'") {
//       // $variables['attributes']['#attributes']['data-inputmask'] = "'alias': 'mycurrency'";
//       // dump($variables['attributes']['#storage']['data-inputmask']['#value']);
//       // dump($variables['attributes']['#storage']['data-inputmask']);
//       // dump($variables['attributes']['#storage']);
//       // dump($variables['attributes']);
//       // dump($variables);
//     }
//   }
// }


function atssc_intra_wxt_entity_field_storage_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {

  // dump($fields);
}
// function atssc_intra_wxt_preprocess_links__language_block(&$variables) {
//   foreach ($variables['links'] as $i => $link) {
//     $variables['links'][$i]['link']['#title'] = new FormattableMarkup('<abbr title="@title">@abbreviation</abbr>', [
//       '@title'        => $link['link']['#options']['language']->getName(),
//       '@abbreviation' => ucfirst($i)
//     ]);
//   }
// }


function atssc_intra_wxt_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#webform_id'])) {
    /** @var \Drupal\webform\WebformInterface $webform */
    $webform = \Drupal::service('entity_type.manager')->getStorage('webform')->load($form['#webform_id']);
  }

  if (isset($webform)) {
    if (!empty($webform->toArray()['category'])) {
      $category = $webform->toArray()['category'];
      $form['#attributes']['class'][] = 'webform-' . Html::cleanCssIdentifier(strtolower($category));
    }
  }

  // dump($form['elements']['section_4_costs_and_financial_information']['financial_information']['financial_information_02']['financial_information_02_host']['#attributes']['data-inputmask'] = "'alias': 'mycurrency'");
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
// function atssc_intra_wxt_preprocess_node(&$variables) {
//   $page_title = $variables['label'][0]['#context']['value'];
//   $variables['page_title'] = (is_string($page_title)) ? htmlspecialchars_decode(htmlspecialchars($page_title)) : htmlentities($page_title);
// }


function atssc_intra_wxt_theme_suggestions_alter(&$suggestions, &$variables = [], &$hook = NULL) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $node = \Drupal::routeMatch()->getParameter('node');
  $route_name = \Drupal::routeMatch()->getRouteName();


  if ($hook == 'form_element') {

    if (isset($variables['element'])) {

      if (isset($variables['element']['#webform_key']) && $variables['element']['#webform_key'] == 'processed_text_02') {
        // dump($variables);
      }

      if (isset($variables['element']['#webform_element']) && isset($variables['element']['#webform_parent_key']) && $variables['element']['#webform_element'] == true && !$variables['element']['#webform_parent_key']) {
        $suggestions[] = $suggestions[0] . '__parent';
      }
    }
  }

  if ($hook == 'paragraph') {

    if (isset($variables['elements']['#paragraph'])) {

      $type = $variables['elements']['#paragraph']->get('type')->getValue();
      $id = $variables['elements']['#paragraph']->get('id')->getValue();

      $type = $type[0]['target_id'];
      $id = $id[0]['value'];



      if ($node) {
        $nodeType = $node->getType();
        $nodeID = $node->id();


        if ($type && $id && $suggestions[1]) {
          $suggestions[] = $suggestions[1] . '__' . $id;
        }

        if ($nodeType && $nodeID && $suggestions[1]) {
          $suggestions[] = $suggestions[1] . '__' . $nodeType;
          $suggestions[] = $suggestions[1] . '__' . $nodeType  . '__' . $nodeID;
        }
      }
    }
  }

  if ($hook == 'container') {
    // dump($route_name);
    if (isset($variables['element']['#id'])) {
      if (isset($variables['element']['#webform_parent_key'])) {
        $isFront = \Drupal::service('path.matcher')->isFrontPage();
        if ($variables['element']['#webform_parent_key'] == "") {
          // dump($suggestions);
          $suggestions[] = 'container__parent';
          if ($isFront) {
            $suggestions[] = 'container__front__parent';
          }
        }
        if ($isFront) {
          $suggestions[] = 'container__front';
        }
      }
    }

    if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-actions') {

      if (isset($node)) {
        $bundle = $node->get('type')->getValue();

        $bundle = $bundle[0]['target_id'];


        try {
          $webform = $node->get('field_webform');
          $suggestions[] = $suggestions[1] . '__' . $bundle;
        } catch (exception $e) {
          $suggestions[] = $suggestions[1] . '__webform';
        }
      }
    }
  }

  if ($hook == 'views_view_fields') {

    $display = $variables['view']->current_display;
    if ($display = 'home_news') {

      $index = $variables['row']->index;

      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      if ($variables['row']->_entity->hasTranslation($langcode)) {
        // dump($variables['row']->_entity->getTranslation($langcode)->get('title')->value);
        $variables['node_title'] = $variables['row']->_entity->getTranslation($langcode)->get('title')->value;
      } else if ($variables['row']->_entity) {
        $title = $variables['row']->_entity->get('title')->getValue();
        $variables['node_title'] = $title[0]['value'];
      }

      if ($index == 0) {
        $suggestions[] = $hook . '__' . $display . '__featured';
      } else if ($index > 0) {
        $suggestions[] = $hook . '__' . $display . '__item';
      }
    }
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function atssc_intra_wxt_preprocess_fieldset(&$variables) {
  $variables['type'] = $variables['element']['#type'];
  $variables['has_parent'] = (empty($variables['element']['#webform_parent_key'])) ? false : true;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function atssc_intra_wxt_preprocess_webform_section(&$variables) {
  $variables['has_parent'] = (empty($variables['element']['#webform_parent_key'])) ? false : true;
}

/**
 * Implements hook_preprocess_media().
 */
function atssc_intra_wxt_preprocess_media(&$variables) {
  $media = $variables['media'];

  if ($media->bundle() === 'document') {
    $file = $media->field_media_document->entity;
    $variables['filesize'] = format_size($file->getSize());
    $variables['encoded_url'] = base64_encode($file->getFileUri());
  }
}

/*
 * Implement theme_preprocess_file_link
 * from \Drupal\bootstrap\Plugin\Preprocess\FileLink
*/
function atssc_intra_wxt_preprocess_file_link(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $file = $variables['file'];
  $url = $file->getFileUri();
  $url_parts  = explode('.', $url);
  $variables['extension'] = strtoupper(array_pop($url_parts));
  $variables['node'] = $node;
}
