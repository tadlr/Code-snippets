{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
	'feed-item',
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}

{% set kindValue = content.field_kind['#items'].getValue.0.value %}

<article{{attributes.addClass(classes)|without('role','about')}}>

	{# <div class="col-sm-12 col-md-1"></div> #}
	<div class="col-sm-12 col-md-9">
		{% if label and not page %}
			<h3{{title_attributes}}>
				{% if  kindValue == "document" %}
					{% set docURL = content.field_pdf|render|striptags|trim  %}
					<a href="{{ docURL }}" target="_blank">{{ label }}</a>
				{% endif %}
				{% if  kindValue == "external" %}
					{% set extURL = content.field_external_resource.0|render|striptags|trim  %}
					<a href="{{ extURL }}" target="_blank">{{ label }}</a>
				{% endif %}
				{% if  kindValue == "internal" or kindValue == 'webform' %}
					<a href="{{ url }}" rel="bookmark">{{ label }}</a>
				{% endif %}

			</h3>

		{% endif %}
		<div{{content_attributes.addClass('content')}}>
			<div class="feed-details col-sm-12 np-x">
				<div class="col-sm-12 col-md-6 np-x">{{ content.field_business_line }}</div>
				<div class="col-sm-12 col-md-6 np-x">{{ content.field_kind }}</div>
			</div>
		</div>
	</div>
	<div class="col-sm-12 col-md-3 d-flex justify-end">
		{% if  kindValue == "document" %}
			{% set docURL = content.field_pdf|render|striptags|trim  %}
			<a class="btn btn-info" href="{{docURL|raw}}" target="_blank">
				<span class="sr-only">{{ label.0 }}
				</span>
				{{"Download"|t}}
				<i class="fa-solid fa-download"></i>
			</a>
		{% endif %}
		{% if  kindValue == "external" %}
			{% set extURL = content.field_external_resource.0|render|striptags|trim  %}
			<a class="btn btn-info external" href="{{extURL|raw}}" target="_blank">
				<span class="sr-only">{{ label.0 }}
				</span>
				{{"View"|t}}
				<i class="fa-solid fa-arrow-up-right-from-square"></i>
			</a>
		{% endif %}
		{% if  kindValue == "internal" or kindValue == 'webform' %}
			<a class="btn btn-info internal" href="{{url|raw}}">

				<span class="sr-only">{{ label.0 }}
				</span>
				{{"View"|t}}
				<i class="fa-regular fa-file-lines"></i>
			</a>
		{% endif %}
	</div>

</article>
