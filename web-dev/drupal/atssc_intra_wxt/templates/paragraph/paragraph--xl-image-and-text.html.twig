{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    paragraph.bundle|clean_class,
    view_mode|clean_class,
    'wb-eqht-grd',
    'clearfix',
	'bg-third'
  ]
%}
{# Title #}
{% set has_title = content.field_title.0|render|trim %}
{% set title_text = content.field_title %}
{% set title_id = content.field_id.0 %}
{% set title_tag = (content.field_heading_tag.0|render|trim is not empty) ? content.field_heading_tag.0 : 'h2' %}
{% set title_border_colour = (content.field_border_colour.0|render|trim is not empty) ? content.field_border_colour.0|render|trim %}


{# Set Image position #}
{% set image_position = (content.field_float_right.0|render|trim == 'True') ? 'pull-right' %}
{# Set image overlay #}
{% set overlay = (content.field_overlay.0|render|trim is not empty) ? 'overlay ' ~ content.field_overlay.0|render|trim %}

{# block footer #}
{% set has_footer = content.field_block_footer.0|render|trim %}

{# button #}
{% set has_button = content.field_url.0|render|trim %}

{% block paragraph %}
	<div{{attributes.addClass(classes)}}>

		<div class="col-sm-12 box-head"></div>


		<div class="image-wrapper col-xs-12 col-sm-6 col-md-4 col-lg-5 {{ image_position }} bg-img {{ overlay }}">
			{{ content.field_image }}
		</div>

		<div class="col-xs-12 col-sm-6 col-md-8 col-lg-7">


			{% block content %}
				<div class="content">


					{% if has_title %}
						<div class="title-wrapper">
							<{{title_tag}}{{title_attributes.addClass("content-title","mrgn-tp-0",title_border_colour)}}>{{title_text.0 }}</{{title_tag}}>
						</div>
					{% endif %}

					{{ content.field_column_content }}


					{% if has_button %}
						<div class="button-wrapper">
							{{ content.field_url.0 }}
						</div>
					{% endif %}
				</div>
			{% endblock %}
		</div>

	</div>
{% endblock paragraph %}
